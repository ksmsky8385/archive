# 제어문
# 기본적으로 모든 언어는 절차 지향의 속성을 갖고 있다
# 위에서 아래, 좌에서 우로의 순서로 프로세스를 진행한다.
# 하지만 필요에 따라 이 흐름을 바꾸는 문법을 제어문이라 한다.
# 제어문은 크게 조건문과 반복문으로 나뉜다.

# 조건문이란? (=분기문)
# 기본 프로세스의 흐름을 타다가 어떠한 조건에 참,거짓 여부에 따라서
# 흐름이 갈리는 구간을 만들게 된다.
# 이를 조건분기문이라 한다.
# 조건문은
# 단순 if문, if ~ else문, if ~ elif ~ ...else문, 중첩 if문 등의
# 유형으로 나뉜다.

# num1 = 10
# num2 = 5

# if num1 > num2:
#     print("num1이 num2보다 크다")



# num1 = int(input("선택 : "))
# if num1 > 0:
#     print("easy game start")
# if num1 > 50:
#     print("hard game start")
# if num1 > 100:
#     print("game exit")



# arr = [1,2,3,4,5]
# na = int(input("찾을 숫자 입력 : "))
# if na in arr:
#     print("arr : ",arr,"찾는 숫자가 존재 합니다 : ",na)
# else:
#     print("arr : ",arr,"안에는 찾고자 하는 숫자가 없습니다 : ",na)
# print('결과 : ',na in arr)
# # A in B 에서 in은 맴버 연산자라 부릅니다
# # A in B 는 B안에 A가 존재하면 참을 반환하고 존재하지 않으면 거짓을 반환,
# # A not in B 는 B 안에 A가 존재하지 않으면 참, 존재하면 거짓을 반환합니다.



# st = "Hello Python Fun"
# na = input("찾고자 하는 문자열입력: ")
# if na in st:
#     print("st : ",st,"찾는 문자열 : ",na,"존재 한다")
# else:
#     print("st 안에는 ",na,"존재 하지 않습니다")



# c언어에서는 문자열과 문자열을 비교가 불가능하다.
# > 배열을 통쨰로 비교가 불가능하다.
# 하지만 파이썬은 문자열과 문자열을 비교할 수 있다.



# 반복문이란? (= 순환문)
# 기본적인 프로세스를 진행한다.
# 특정 연속된 구간을 주어진 조건에 만족할 때 까지 반복 순환하는 문법



# 반복의 유형
# 1) 동일한 반복
# 2) 단계적 반복
# 3) 불규칙 패턴을 갖는 반복

# 반복문의 핵심은 무엇을 얼마만큼 반복시킬 것인지 정하거나
# 반복의 패턴을 찾는 것이 가장 중요하다.

# for i in range(1 , 11 , 1) : # 반복 구문은 절대적으로 반복의 횟수만 결정함함
#     #       (i=1, i<11, i+=1)
#     print(i)
#     # print("동일한 반복!") # 꼭 위에서 다룬 변수를 사용할 필요 없음



# for i in range(10 , -1 , -1) :
#     #       (i=10, i>-1, i+=-1)
#     print(i , ": 10 ~ 0 까지 출력")



# for i in range(1, 11, 1):
#     Sum =  # 초기화되지 않은 변수는 절대 연산할 수 없다다
# print(Sum)



# 변수의 초기화 - 변수에 최초의 값을 넣어주는 행위
# 변수의 정의 - 변수에 값을 넣어주는 행위

# total = 0
# for i in range(1, 11):
#     total += i
# print(total)

# for i in range(1,31,1):
#     print(i,end="\t")
#     if i%5 == 0 :
#         print()



# for i in range(0,10):
#     # 증감값은 생략 가능하다. 다만 양수 1의 기본값을 갖고 있다다
#     print(i)
    
# for i in range(10):
#     # 초기값도 생략 가능하다. 다만 초기값은 0의 기본값을 갖고 있다
#     # 끝값만 있는 경우 끝값의 숫자가 반복의 횟수이기도 하다다
#     print(i)


# for i in range(10,2):
#     print(i)
#     # 바로 종료한다. 증감값은 기본이 양수 1이라서 시작하자마자 조건이
#     # 거짓이 되면서 바로 종료된다.

# for i in range(): Ehsms range(,,)
# 위와 같은 표현이 불가능하다



# a = [10,2,11,3,9,7,14,5]
# for j in a :
#     # 시퀀스형 자료형은 반복문에서 차례대로 대입되는 속성을 갖는다
#     print(j)



# for i in range(5):
#     print("상위포문 %d일 때 하위포문 : "%i,end="")
#     for j in range(5):
#         print("%3d %(i*j)", end=" ")
#     print()



# flag - 관례적으로 사용되는 변수 - 찾아보기



