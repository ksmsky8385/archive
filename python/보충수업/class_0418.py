# print("파이썬 첫날 ^^~~\\")
# 주석이란?
# 컴퓨어에게 전달하는 명령에서 예외처리하는 문법이다.
# 주석은 줄(행)주석과 블럭주석으로 나뉜다
# 줄주석은 # 기호 뒤(오른쪽방향)에 모두 주석처리된다.
# 단, 행이 바뀌면 해제된다.
# 블럭주석은 """(따옴표 3개로) 시작지점을 지정하고
# 따옴표 3개를 이용하여 끝을 지정하면 그 사이에 여러줄이 모두 주석처리 된다

"""
print("파이썬 첫날 ^^~~\\") # 주석은 특정행의 코멘트를 작성하거나
# 불필요한 코드를 예외처리한다 print("파이썬 첫날 ^^~~\\")
print("파이썬 첫날 ^^~~\\")
'''
print("파이썬 첫날 ^^~~\\")
print("파이썬 첫날 ^^~~\\")
print("파이썬 첫날 ^^~~\\")
print("파이썬 첫날 ^^~~\\")
'''

print("파이썬 첫날 ^^~~\\")
"""

# print("영희야 안녕")
# print("\"영희야 안녕\"")
# print('"영희야 안녕"')
# # 근데 c언어 같이 다른언어에서는 안됌. ('랑 "가 다른 목적으로 사용함. python에서는 같은 의미.)




# \r : 줄의 처름으로
# \b : 한칸 왼쪽으로 커서이동     얘네 찾아보고 쓰는 법 익혀보기

# \t 활용법

# print(1234567812345678123456781234567812345678123456781234567812345678)
# print("Have\t""a\t""Good\t""Time.")
# print("1234567\t""1\t""12345678\t""123")
# print("대한민국\t만세\t대한독립만세\t만만세")



# print('표현 \ 방식')

# print('표현 \1 방식')
# print('표현 \2 방식')
# print('표현 \3 방식')
# print('표현 \4 방식')
# print('표현 \5 방식')
# print('표현 \6 방식')
# print('표현 \7 방식')
# print('표현 \8 방식')
# print('표현 \9 방식')
# print('표현 \10 방식')
# print('표현 \11 방식')

# print('표현 \\2 방식')
# #print('표현 방식\') #error code
# print('표현 방식\\')


# print("덧셈 결과 : ",123 + 123)
# print("뺄셈 결과 : ",542 - 242)
# print("곱셈 결과 : ",2 * 123)
# print("나눗셈 결과 : ",120 / 3)
# # 추가로 ,로 나누면 자동으로 사이에 공백 1개가 생김.

# print('12 + 54 =',12+54,'입니다')


# # 진수 변경
# print(123)
# print(0b01111011)
# print(0o173)
# print(0x7b)



# print("%d" % 123)
# # print("%d %d" % 123)
# # print(" %d " % (123 , 321))
# print("%d %d " % (123 , 321)) 
# print("%d + %d = %d" % (123 , 321 , 123 + 321)) 


# print("%c %c"%('a',"A"))
# print("%c %c"%(97,65))


# print("기본 값 :%f" % 123.45678)
# print("설정 값 :%10.3f" % 123.45678)
# # %A.Bf에서 A는 소수점을 포함한 전체 칸 확보
# # B는 표현할 소수자리 지정 (단, 반올림 처리되어 출력됨)
# print("설정  값 :%2.1f" % 123.45678)
# print("설정  값 :%.2f" % 123.45678)


# print(f"{12}+{4}={12+4}")
# print(f"{3.1415923445434:.2f}")


# print("기본 값 :%s" % "python test")
# print("설정 값 :%20s" % "python test")
# print("설정 값 :%20.3s" % "python test")



# # 예제
# num1 = 5
# print("id num1 : ",id(num1))
# num2 = 10
# num1 = num1+num2
# print("id num1 : ",id(num1))
# print(id(5))
# print(id(15))

# print("id sum : ",id(sum_))





# flt = 123.567
# print("round(flt) : ", round(flt))
# print("round(flt,1)" , round(flt,1))
# print("round(flt,2) : " , round(flt,2))






# flt = 123.123
# print("%.3f + %.3f = %.3f" % (flt,321.321,flt+321.321))
# print(flt,"+",321.321,"=",flt+321.321)
# ch1,ch2 ,ch3= "파",'2',"썬"
# print("%c + %c + %c = %s"%(ch1,ch2,ch3,ch1+ch2+ch3))
# print(ch1,"+",ch2,"+",ch3,"=",ch1+ch2+ch3)
# str_1 = "python "; str_2 = "test"
# str_3 = str_1 + str_2
# print("%s + %s = %s" % (str_1,str_2,str_1+str_2))
# print(str_1,"+",str_2,"=",str_1+str_2)

# 숫자(정수,실수)와 숫자(정수,실수)는 + 연산자를 사용하면
# 우리가 사용하는 덧셈 연산이 실행된다.
# 시퀀스형 자료형은 + 연산자를 사용하면
# 하나로 합쳐주는 업데이트 연산이 진행된다.
# 단, 시퀀스형 자료형 연산은 좌, 우 피연상자의 자료형이 일치해야 한다.
# ※ 시퀀스형 자료형이란?
# 0~n-1 의 보조첨자를 사용하며, 좌에서 우로 순서가 존재하며,
# 반복문에서 차례대로 대입되는 속성을 가진 자료형이다.
# 리스트, 튜플, 문자열





# st1 = "Python"
# st2 = "Test"
# su = 100
# flt = 1.11
# num = '100'
# print(flt+su)
# print(st1 + st2)
# #print(su+num)




# su = 100
# print('type(su) : ',type(su))
# print('type(str(su)) : ',type(str(su)))
# print('type(float(su)) : ',type(float(su)))
# # su = float(su)
# print('type(su) : ',type(su))
# # ste, float, int 를 캐스팅 함수(또는 연산자)라고 표현한다.
# # 캐스팅 함수를 이용해서 강제 형 변환을 할 수 있다.
# # 캐스팅 함수를 사용하면 단발성이지만 변수에 지정하면 완전 속성을 변경 가능하다
# # su = '백' ; print(int(su)) <- 에러남. 숫자의 모양을 한 문자열만 형변환이 가능하다
# # su = 3.14 ; print(int(su)) <- 에러남. 정수모양을 하는 문자열을 flt 형변환 하는건 가능하나. 그 반대는 불가능
# # 10진 정수모양만 형변환 가능



